the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", delim="\t")
cat("\t")
wzl <- cat("\t")
wzl
?read.delim
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t"
)
View(the.data)
summary(the.data)
?read.delim
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present" )
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "numeric", "numeric")
descript.names <- , c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "numeric", "numeric")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names <- descript.names, colClasses <- data.classes, skip=1)
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names <- descript.names, colClasses <- data.classes, skip=1, header=FALSE)
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, colClasses=data.classes, skip=1, header=FALSE)
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, skip=1, header=FALSE)
for(i in seq(1,numCols(the.data)))
{
if(data.classes[,i] == "numeric") data.classes[,i] <- as.numeric(data.classes[,i])
if(data.classes[,i] == "factor") data.classes[,i] <- factor(data.classes[,i])
}
numcols
numrows
numRow
nRows
nRow
nrow
for(i in seq(1,ncol(the.data)))
{
if(data.classes[,i] == "numeric") data.classes[,i] <- as.numeric(data.classes[,i])
if(data.classes[,i] == "factor") data.classes[,i] <- factor(data.classes[,i])
}
for(i in seq(1,ncol(the.data)))
{
if(data.classes[,i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[,i] == "factor") the.data[,i] <- factor(the.data[,i])
}
for(i in seq(1,ncol(the.data)))
{
if(data.classes[i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[i] == "factor") the.data[,i] <- factor(the.data[,i])
}
summary(the.data)
which(data.classes == "numeric")
descript.names[which(data.classes == "numeric")]
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t")
colnames(the.data)
orig.codes <- colnames(the.data)
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
#the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, skip=1, header=FALSE)
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "numeric", "numeric")
data.dict.codes <- colnames(the.data)
colnames(the.data) <- descript.names
data.dict.codes[data.classes=="numeric"]
descript.names[data.classes=="numeric"]
for(i in seq(1,ncol(the.data)))
{
if(data.classes[i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[i] == "factor") the.data[,i] <- factor(the.data[,i])
}
the.data$no.household.income <- the.data$raw.household.income == 0
summary(the.data)
the.data$no.household.income[is.na(the.data$no.household.income)] <- 0
summary(the.data)
descript.names[which(data.classes == "numeric")]
data.dict.codes[which(data.classes == "numeric")]
the.data$not.self.employ <- the.data$self.employ.income == 0
the.data$not.self.employ[is.na(the.data$not.self.employ)] <- 0
summary(the.data)
descript.names[which(data.classes == "numeric")]
data.dict.codes[which(data.classes == "numeric")]
the.data$at.least.6.vehicles <- the.data$num.vehicles == 6
the.data$at.least.6.vehicles <- the.data$num.vehicles == 6
the.data$at.least.6.vehicles[is.na(the.data$at.least.6.vehicles)] <- 0
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "factor", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
#the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, skip=1, header=FALSE)
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "factor", "numeric")
data.dict.codes <- colnames(the.data)
colnames(the.data) <- descript.names
for(i in seq(1,ncol(the.data)))
{
if(data.classes[i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[i] == "factor") the.data[,i] <- factor(the.data[,i])
}
#add factors to account for special codes in numeric variables
the.data$no.household.income <- the.data$raw.household.income == 0
the.data$no.household.income[is.na(the.data$no.household.income)] <- 0
#nobody hits the ceiling or the floor of this code so we do not create any more factors
#possible that public assistance dollars should be binary; does not reach cap
the.data$not.self.employ <- the.data$self.employ.income == 0
the.data$not.self.employ[is.na(the.data$not.self.employ)] <- 0
#SEMP does not hit either min or max cap
the.data$at.least.6.vehicles <- the.data$num.vehicles == 6
the.data$at.least.6.vehicles[is.na(the.data$at.least.6.vehicles)] <- 0
the.data$worked.at.least.99 <- the.data$hours.worked == 99
the.data$worked.at.least.99[is.na(the.data$worked.at.least.99)] <- 0
descript.names[which(data.classes == "numeric")]
data.dict.codes[which(data.classes == "numeric")]
summary(the.data)
data.dict.codes
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "industry", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
#the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, skip=1, header=FALSE)
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "factor", "numeric")
data.dict.codes <- colnames(the.data)
colnames(the.data) <- descript.names
for(i in seq(1,ncol(the.data)))
{
if(data.classes[i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[i] == "factor") the.data[,i] <- factor(the.data[,i])
}
#add factors to account for special codes in numeric variables
the.data$no.household.income <- the.data$raw.household.income == 0
the.data$no.household.income[is.na(the.data$no.household.income)] <- 0
#nobody hits the ceiling or the floor of this code so we do not create any more factors
#possible that public assistance dollars should be binary; does not reach cap
the.data$not.self.employ <- the.data$self.employ.income == 0
the.data$not.self.employ[is.na(the.data$not.self.employ)] <- 0
#SEMP does not hit either min or max cap
the.data$at.least.6.vehicles <- the.data$num.vehicles == 6
the.data$at.least.6.vehicles[is.na(the.data$at.least.6.vehicles)] <- 0
the.data$worked.at.least.99 <- the.data$hours.worked == 99
the.data$worked.at.least.99[is.na(the.data$worked.at.least.99)] <- 0
descript.names[which(data.classes == "numeric")]
data.dict.codes[which(data.classes == "numeric")]
summary(the.data)
train.obs <- nrow(training.data)
data.to.predict <- the.data[is.na(the.data$health.insurance)]
training.data <- the.data[!is.na(the.data$health.insurance)]
train.obs <- nrow(training.data)
summary(the.data)
the.data$health.insurance
data.to.predict <- the.data[is.na(the.data$health.insurance),]
training.data <- the.data[!is.na(the.data$health.insurance),]
train.obs <- nrow(training.data)
data.to.predict <- the.data[is.na(the.data$health.insurance),]
training.data <- the.data[!is.na(the.data$health.insurance),]
n.model <- nrow(training.data)
n.train <- ceiling(n.model * 0.8)
train.obs <- sample(n.model, n.train)
train.set <- training.data[train.obs,]
validation.set <- training.data[-train.obs]
validation.set <- training.data[-train.obs,]
colnames(the.data)
source("Dropbox/Civis/condense_categories.R")
condense.categories
for(colname in colnames(the.data))
{
the.data[, colname] <- condense.categories(the.data[, colname], 150)
}
summary(the.data)
data.to.predict <- the.data[is.na(the.data$health.insurance),]
training.data <- the.data[!is.na(the.data$health.insurance),]
n.model <- nrow(training.data)
n.train <- ceiling(n.model * 0.8)
train.obs <- sample(n.model, n.train)
train.set <- training.data[train.obs,]
validation.set <- training.data[-train.obs,]
bad.predictors <- c("obs", "PUMA")
predictors <- setdiff(colnames(the.data), do.not.model)
do.not.model <- c("obs", "PUMA", "health.insurance")
predictors <- setdiff(colnames(the.data), do.not.model)
the.formula <- as.formula(paste0("health.insurance ~ "), paste0(predictors, collapse=" + "))
the.formula <- as.formula(paste0("health.insurance ~ ", paste0(predictors, collapse=" + ")))
the.formula
data.dict.copdes
data.dict.codes
?gbm
library(gbm)
?gbm
gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=100, cv.folds=5f)
gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=100, cv.folds=5)
the.model <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=100, cv.folds=5)
the.data$health.insurance
the.data$health.insurance <- as.numeric(the.data$health.insurance)
the.data$health.insurance
the.data$health.insurance <- as.numeric(the.data$health.insurance) - 1
the.data$health.insurance
data.dict.codes
the.data$uninsured <- as.numeric(the.data$health.insurance) - 1
the.data$uninsured
the.data$uninsured <- as.numeric(the.data$health.insurance) -
0
the.data$uninsured
the.data$uninsured <- as.numeric(the.data$health.insurance)
the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t")
descript.names <- c("obs", "age", "building", "citizenship", "class.of.worker", "disability", "family.type.employment",
"food.stamps", "household", "health.insurance", "raw.household.income", "industry", "transport.work",
"marital.status", "military.service", "married.spouse.present", "when.moved", "num.own.children",
"num.persons.housing.record", "public.assist.income", "PUMA", "race", "hot.cold.run.water",
"school.enrollment", "self.employ.income", "sex", "state", "type.housing", "num.vehicles",
"num.workers", "hours.worked")
#the.data <- read.delim("Dropbox/Civis/ds_test_final.txt", sep="\t", col.names=descript.names, skip=1, header=FALSE)
data.classes <- c("numeric", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "factor",
"factor", "numeric", "factor", "factor", "factor", "factor", "factor", "factor", "numeric",
"numeric", "numeric", "factor", "factor", "factor", "factor", "numeric", "factor", "factor",
"factor", "numeric", "factor", "numeric")
data.dict.codes <- colnames(the.data)
colnames(the.data) <- descript.names
for(i in seq(1,ncol(the.data)))
{
if(data.classes[i] == "numeric") the.data[,i] <- as.numeric(the.data[,i])
if(data.classes[i] == "factor") the.data[,i] <- factor(the.data[,i])
}
#add factors to account for special codes in numeric variables
the.data$no.household.income <- the.data$raw.household.income == 0
the.data$no.household.income[is.na(the.data$no.household.income)] <- 0
#nobody hits the ceiling or the floor of this code so we do not create any more factors
#possible that public assistance dollars should be binary; does not reach cap
the.data$not.self.employ <- the.data$self.employ.income == 0
the.data$not.self.employ[is.na(the.data$not.self.employ)] <- 0
#SEMP does not hit either min or max cap
the.data$at.least.6.vehicles <- the.data$num.vehicles == 6
the.data$at.least.6.vehicles[is.na(the.data$at.least.6.vehicles)] <- 0
the.data$worked.at.least.99 <- the.data$hours.worked == 99
the.data$worked.at.least.99[is.na(the.data$worked.at.least.99)] <- 0
#make response 0-1
the.data$uninsured <- as.numeric(the.data$health.insurance) - 1
table(the.data$uninsured)
the.data$health.insurance <- NULL
table(the.data$uninsured)
summary(the.data$uninsured)
descript.names[which(data.classes == "numeric")]
data.dict.codes[which(data.classes == "numeric")]
source("Dropbox/Civis/condense_categories.R")
#this is a function I use to bin together levels with a small number of obs in
#categorical variables
for(colname in colnames(the.data))
{
the.data[, colname] <- condense.categories(the.data[, colname], 150)
}
data.to.predict <- the.data[is.na(the.data$uninsured),]
training.data <- the.data[!is.na(the.data$uninsured),]
n.model <- nrow(training.data)
n.train <- ceiling(n.model * 0.8)
train.obs <- sample(n.model, n.train)
train.set <- training.data[train.obs,]
validation.set <- training.data[-train.obs,]
#the observation number is not useful to model on.
#PUMA is not useful in this form. We would need to pull demographic characteristics of the
#person's region to make it useful. Due to time constraints, I will simply ignore this variable
do.not.model <- c("obs", "PUMA", "uninsured")
predictors <- setdiff(colnames(the.data), do.not.model)
the.formula <- as.formula(paste0("uninsured ~ ", paste0(predictors, collapse=" + ")))
library(gbm)
the.model <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=10, cv.folds=5)
summary(the.model)
do.not.model <- c("obs", "PUMA", "uninsured", "industry")
predictors <- setdiff(colnames(the.data), do.not.model)
the.formula <- as.formula(paste0("uninsured ~ ", paste0(predictors, collapse=" + ")))
library(gbm)
the.model <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=1000, cv.folds=5)
gbm.perf(the.model)
?gbm.more
?gbm
the.model <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=1000, cv.folds=5, shrinkage=0.1)
the.model <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=1000, cv.folds=5, shrinkage=0.1, n.minobsinnode=30, interaction.depth=3)
gbm.perf(the.model)
the.model.2 <- gbm(formula=the.formula, distribution="bernoulli", data=train.set, n.trees=1000, cv.folds=5, shrinkage=0.4, n.minobsinnode=30, interaction.depth=3)
gbm.perf(the.model.2)
gbm.perf(the.model)
gbm.perf(the.model.2)
summary(the.model.2)
summary(the.data$uninsured)
table(the.data$uninsured)
?gbm
valid.predictions <- predict(gbm.model.2, validation.set)
valid.predictions <- predict(the.model.2, validation.set)
valid.predictions <- predict(the.model.2, validation.set, type="response")
?gini
gini
source("Dropbox/Civis/gini.R")
gini
the.gini <- gini(valid.predictions, validation.set$uninsured plot=TRUE)
the.gini <- gini(valid.predictions, validation.set$uninsured, plot=TRUE)
install.packages("pROC")
the.roc <- roc(validation.set$uninsured, valid.predictoins)
library(pROC)
the.roc <- roc(validation.set$uninsured, valid.predictoins)
the.roc <- roc(validation.set$uninsured, valid.predictions)
plot(the.roc)
auc(the.roc)
final.model <- gbm(formula=the.formula, distribution="bernoulli", data=training.data, n.trees=1000, cv.folds=5, shrinkage=0.1, n.minobsinnode=30, interaction.depth=3)
to.predict.predicted <- predict(the.model.2, data.to.predict, type="reponse")
to.predict.predicted <- predict(the.model.2, data.to.predict, type="response")
summary(the.model.2)
summary(the.model.2, cbars=12, las=1)
par(mar=c(4.2, 21.5, 2.1, 2.1))
summary(the.model.2, cBars=12, las=1)
par(mar=c(4.2, 21.5, 2.1, 2.1))
summary(the.model.2, cBars=12, las=1)
par(mar=c(4.2, 12.5, 2.1, 2.1))
summary(the.model.2, cBars=12, las=1)
gbm.perf(the.model.2)
output.predictions <- cbind(data.to.predict$obs, valid.predictions)
dim(valid.predictions)
output.predictions <- cbind(data.to.predict$obs, to.predict.predicted)
View(training.data)
View(the.data)
View(output.predictions)
write.csv(output.predictions, header=c("aa_primarykey","probability_score"),file="Dropbox/Civis/zaneblanton_datascience1_scores.csv")
?write.csv
write.csv(output.predictions, col.names=c("aa_primarykey","probability_score"),
row.names=FALSE, file="Dropbox/Civis/zaneblanton_datascience1_scores.csv")
colnames(output.predictions) <- col.names=c("aa_primarykey","probability_score")
write.csv(output.predictions, row.names=FALSE, file="Dropbox/Civis/zaneblanton_datascience1_scores.csv")
View(output.predictions)
colnames(output.predictions) <- c("aa_primarykey","probability_score")
write.csv(output.predictions, row.names=FALSE, file="Dropbox/Civis/zaneblanton_datascience1_scores.csv")
summary(model.2)
summary(the.model.2)
the.model.2
source('~/.active-rstudio-document')
install.packages("data.table")
install.packages("dplyr")
salt <- apply(1:4, function(x) rep(x,4))
salt <- sapply(1:4, function(x) rep(x,4))
sugar <- rep(1:4, 4)
preference.scores <- c(-.240,
-.159,
-.349,
-.405,
-.039,
0.105,
0.083,
-0.064,
0.185,
0.271,
0.166,
-.020,
0.055,
0.113,
0.136,
0.161)
gb.data <- cbind(salt, sugar, preference.scores)
salt <- as.vector(sapply(1:4, function(x) rep(x,4)))
gb.data <- cbind(salt, sugar, preference.scores)
gb.data
lm(preference.scores ~ salt + sugar + salt * salt + sugar * sugar + salt * sugar, data = gb.data)
gb.data <- data.frame(salt, sugar, preference.scores)
lm(preference.scores ~ salt + sugar + salt * salt + sugar * sugar + salt * sugar, data = gb.data)
lm(preference.scores ~ salt + sugar + poly(salt,2) + poly(sugar,2) + salt * sugar, data = gb.data)
gb.lm <- lm(preference.scores ~ salt + sugar + poly(salt,2) + poly(sugar,2) + salt * sugar, data = gb.data)
summary(gb.lm)
cv.glm
glm.cv
install.packages("quadprog")
k
library(data.table)
library(gbm)
library(pROC)
library(glmnet)
setwd("~/Dropbox/CivicHack/Water/data/derived/")
load("transformed_data.RData")
water_data[1:10, 1:20]
water_data[1:10, 1:200]
table(water_data$DSN6)
dim(water_data)
table(water_data$segment_1)
table(water_data$segment_1)
water_data$num_start
min(water_data$num_start)
as.date(min(water_data$num_start))
date(min(water_data$num_start))
?date
date(min(water_data$start))
min(water_data$start)
water_data$start
dim(water_data)
names(water_data)
?as.date
?date
